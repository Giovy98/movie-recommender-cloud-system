name: GCP Deploy, Data Upload & GKE Configuration

on:
  workflow_dispatch:
  push:
    branches:
      - feature/google-cloud-gke
    paths:
      - 'preprocessing_service/**'
      - 'recommender_service/**'
      - 'k8s-gke/argoWorkflow/**'

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: ${{ secrets.GCP_REGION }}
  DOCKER_EMAIL: ${{ secrets.DOCKER_EMAIL }}
  ARTIFACT_REPOSITORY: ${{ secrets.ARTIFACT_REPOSITORY }}

jobs:
  detect-changes: # Rileva i cambiamenti nei servizi
    name: Detect Service Changes
    runs-on: ubuntu-latest
    outputs:
      preprocessing_changed: ${{ steps.changes.outputs.preprocessing_service }}
      recommender_changed: ${{ steps.changes.outputs.recommender_service }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 2  # Necessario per il confronto
      
      - name: Check for changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            preprocessing_service:
              - 'preprocessing_service/**'
            recommender_service:
              - 'recommender_service/**'
          base: feature/google-cloud-gke

  upload-data: # Upload data to GCS
    name: Upload Data to GCS
    runs-on: ubuntu-latest
    needs: detect-changes
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Google Auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Check if data already exists in GCS
        id: check_data
        run: |
          echo "Controllo presenza dati in: gs://${{ secrets.GCP_BUCKET_NAME }}/raw/"
          if gsutil -q stat gs://${{ secrets.GCP_BUCKET_NAME }}/raw/*.csv; then
            echo "I dati esistono già. Upload non necessario."
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "Dati non trovati. Procedo con l'upload."
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload data to GCS
        if: steps.check_data.outputs.skip == 'false'
        run: |
          echo "Contenuto della cartella data:"
          ls -la data/*
          gsutil -m cp -r data/*.csv gs://${{ secrets.GCP_BUCKET_NAME }}/raw
          echo "Dati caricati con successo su gs://${{ secrets.GCP_BUCKET_NAME }}/raw"


  build-push-preprocessing: # Build & Push Preprocessing Service
    name: Build & Push Preprocessing Service
    runs-on: ubuntu-latest
    needs: [upload-data, detect-changes]
    if: needs.detect-changes.outputs.preprocessing_changed == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Google Auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ secrets.GCP_REGION }}-docker.pkg.dev --quiet

      - name: Build and push preprocessing service
        run: |
          cd preprocessing_service
          echo "Building preprocessing_service..."
          docker build -t ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.ARTIFACT_REPOSITORY }}/preprocessing_service:${{ github.sha }} .
          docker tag ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.ARTIFACT_REPOSITORY }}/preprocessing_service:${{ github.sha }} ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.ARTIFACT_REPOSITORY }}/preprocessing_service:latest
          docker push ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.ARTIFACT_REPOSITORY }}/preprocessing_service:${{ github.sha }}
          docker push ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.ARTIFACT_REPOSITORY }}/preprocessing_service:latest
          echo "Preprocessing service built and pushed successfully"

  build-push-recommender: # Build & Push Recommender Service
    name: Build & Push Recommender Service
    runs-on: ubuntu-latest
    needs: [upload-data, detect-changes]
    if: needs.detect-changes.outputs.recommender_changed == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Google Auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ secrets.GCP_REGION }}-docker.pkg.dev --quiet

      - name: Build and push recommender service
        run: |
          cd recommender_service
          echo "Building recommender_service..."
          docker build -t ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.ARTIFACT_REPOSITORY }}/recommender_service:${{ github.sha }} .
          docker tag ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.ARTIFACT_REPOSITORY }}/recommender_service:${{ github.sha }} ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.ARTIFACT_REPOSITORY }}/recommender_service:latest
          docker push ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.ARTIFACT_REPOSITORY }}/recommender_service:${{ github.sha }}
          docker push ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.ARTIFACT_REPOSITORY }}/recommender_service:latest
          echo "Recommender service built and pushed successfully"
    
  configure-gke:
    name: Configure GKE & Deploy Argo Workflow
    runs-on: ubuntu-latest
    needs: [detect-changes, build-push-preprocessing, build-push-recommender]
    # Esegui solo se almeno un servizio è cambiato
    if: |
      always() && 
      (needs.detect-changes.outputs.preprocessing_changed == 'true' || 
       needs.detect-changes.outputs.recommender_changed == 'true')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Google Auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Install GKE auth plugin
        run: gcloud components install gke-gcloud-auth-plugin

      - name: Install kubectl
        run: gcloud components install kubectl --quiet

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials ${{ secrets.GCP_GKE_CLUSTER_NAME }} \
            --zone ${{ secrets.GCP_ZONE }} \
            --project ${{ secrets.GCP_PROJECT_ID }}

      - name: Create namespaces
        run: |
          kubectl get namespace argo || kubectl create namespace argo

      - name: Install Argo Workflows
        run: |
          kubectl apply -n argo -f https://github.com/argoproj/argo-workflows/releases/download/v3.6.5/install.yaml

      - name: Decode GCP Service Account Key and .env
        run: |
          echo "${{ secrets.GCP_SA_KEY }}" | base64 --decode > ./gcs-key.json
          echo "${{ secrets.ENV_FILE }}" > .env

      - name: Create Docker Registry Secret for argo
        run: |
          kubectl delete secret gcr-json-key-gke-argo -n argo --ignore-not-found
          kubectl create secret docker-registry gcr-json-key-gke-argo \
            --docker-server=${{ secrets.GCP_REGION }}-docker.pkg.dev \
            --docker-username=_json_key \
            --docker-password="$(cat gcs-key.json)" \
            --docker-email=${{ secrets.DOCKER_EMAIL }} \
            --namespace=argo

      - name: Create GCS key secret for argo and deployment
        run: |
          kubectl delete secret gcs-key-gke-argo -n argo --ignore-not-found
          kubectl create secret generic gcs-key-gke-argo --from-file=key.json=./gcs-key.json --namespace=argo

      - name: Create ConfigMaps
        run: |
          kubectl delete configmap service-config-gke-argo -n argo --ignore-not-found
          kubectl create configmap service-config-gke-argo --from-env-file=.env --namespace=argo

      - name: Ensure RoleBinding for Argo
        run: |
          kubectl get rolebinding default-admin -n argo || kubectl create rolebinding default-admin \
            --clusterrole=admin \
            --serviceaccount=argo:default \
            --namespace=argo

      - name: Install Argo CLI
        run: |
          ARGO_VERSION="v3.6.5"
          curl -sLO https://github.com/argoproj/argo-workflows/releases/download/${ARGO_VERSION}/argo-linux-amd64.gz
          gunzip argo-linux-amd64.gz
          chmod +x argo-linux-amd64
          sudo mv argo-linux-amd64 /usr/local/bin/argo
          argo version

      - name: Replace Variables in Workflow YAML
        run: |
          export REGION=${{ secrets.GCP_REGION }}
          export PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}
          export ARTIFACT_REPOSITORY=${{ secrets.ARTIFACT_REPOSITORY }}
          envsubst < k8s-gke/argoWorkflow/job-test-cloud.yaml > k8s-gke/argoWorkflow/job-test-cloud-new.yaml

      - name: Show which services were built
        run: |
          echo "Riepilogo build:"
          echo "Preprocessing service changed: ${{ needs.detect-changes.outputs.preprocessing_changed }}"
          echo "Recommender service changed: ${{ needs.detect-changes.outputs.recommender_changed }}"

      - name: Submit Argo Workflow
        run: |
          argo submit k8s-gke/argoWorkflow/job-test-cloud-new.yaml -n argo --watch

      - name: Clean Up Sensitive Files
        if: always()
        run: |
          rm -f ./gcs-key.json
          rm -f .env
          echo "File sensibili eliminati"
